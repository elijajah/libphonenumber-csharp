// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace PhoneNumbers {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Phonenumber {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static Phonenumber() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PhoneNumber : pb::GeneratedMessageLite<PhoneNumber, PhoneNumber.Builder> {
    public PhoneNumber() { }
    private static readonly PhoneNumber defaultInstance = new PhoneNumber().MakeReadOnly();
    private static readonly string[] _phoneNumberFieldNames = new string[] { "country_code", "country_code_source", "extension", "italian_leading_zero", "national_number", "preferred_domestic_carrier_code", "raw_input" };
    private static readonly uint[] _phoneNumberFieldTags = new uint[] { 8, 48, 26, 32, 16, 58, 42 };
    public static PhoneNumber DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PhoneNumber DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PhoneNumber ThisMessage {
      get { return this; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CountryCodeSource {
        FROM_NUMBER_WITH_PLUS_SIGN = 1,
        FROM_NUMBER_WITH_IDD = 5,
        FROM_NUMBER_WITHOUT_PLUS_SIGN = 10,
        FROM_DEFAULT_COUNTRY = 20,
      }
      
    }
    #endregion
    
    public const int CountryCodeFieldNumber = 1;
    private bool hasCountryCode;
    private int countryCode_;
    public bool HasCountryCode {
      get { return hasCountryCode; }
    }
    public int CountryCode {
      get { return countryCode_; }
    }
    
    public const int NationalNumberFieldNumber = 2;
    private bool hasNationalNumber;
    private ulong nationalNumber_;
    public bool HasNationalNumber {
      get { return hasNationalNumber; }
    }
    public ulong NationalNumber {
      get { return nationalNumber_; }
    }
    
    public const int ExtensionFieldNumber = 3;
    private bool hasExtension;
    private string extension_ = "";
    public bool HasExtension {
      get { return hasExtension; }
    }
    public string Extension {
      get { return extension_; }
    }
    
    public const int ItalianLeadingZeroFieldNumber = 4;
    private bool hasItalianLeadingZero;
    private bool italianLeadingZero_;
    public bool HasItalianLeadingZero {
      get { return hasItalianLeadingZero; }
    }
    public bool ItalianLeadingZero {
      get { return italianLeadingZero_; }
    }
    
    public const int RawInputFieldNumber = 5;
    private bool hasRawInput;
    private string rawInput_ = "";
    public bool HasRawInput {
      get { return hasRawInput; }
    }
    public string RawInput {
      get { return rawInput_; }
    }
    
    public const int CountryCodeSourceFieldNumber = 6;
    private bool hasCountryCodeSource;
    private global::PhoneNumbers.PhoneNumber.Types.CountryCodeSource countryCodeSource_ = global::PhoneNumbers.PhoneNumber.Types.CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN;
    public bool HasCountryCodeSource {
      get { return hasCountryCodeSource; }
    }
    public global::PhoneNumbers.PhoneNumber.Types.CountryCodeSource CountryCodeSource {
      get { return countryCodeSource_; }
    }
    
    public const int PreferredDomesticCarrierCodeFieldNumber = 7;
    private bool hasPreferredDomesticCarrierCode;
    private string preferredDomesticCarrierCode_ = "";
    public bool HasPreferredDomesticCarrierCode {
      get { return hasPreferredDomesticCarrierCode; }
    }
    public string PreferredDomesticCarrierCode {
      get { return preferredDomesticCarrierCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCountryCode) return false;
        if (!hasNationalNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _phoneNumberFieldNames;
      if (hasCountryCode) {
        output.WriteInt32(1, field_names[0], CountryCode);
      }
      if (hasNationalNumber) {
        output.WriteUInt64(2, field_names[4], NationalNumber);
      }
      if (hasExtension) {
        output.WriteString(3, field_names[2], Extension);
      }
      if (hasItalianLeadingZero) {
        output.WriteBool(4, field_names[3], ItalianLeadingZero);
      }
      if (hasRawInput) {
        output.WriteString(5, field_names[6], RawInput);
      }
      if (hasCountryCodeSource) {
        output.WriteEnum(6, field_names[1], (int) CountryCodeSource, CountryCodeSource);
      }
      if (hasPreferredDomesticCarrierCode) {
        output.WriteString(7, field_names[5], PreferredDomesticCarrierCode);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCountryCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CountryCode);
      }
      if (hasNationalNumber) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, NationalNumber);
      }
      if (hasExtension) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Extension);
      }
      if (hasItalianLeadingZero) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, ItalianLeadingZero);
      }
      if (hasRawInput) {
        size += pb::CodedOutputStream.ComputeStringSize(5, RawInput);
      }
      if (hasCountryCodeSource) {
        size += pb::CodedOutputStream.ComputeEnumSize(6, (int) CountryCodeSource);
      }
      if (hasPreferredDomesticCarrierCode) {
        size += pb::CodedOutputStream.ComputeStringSize(7, PreferredDomesticCarrierCode);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasCountryCode) hash ^= countryCode_.GetHashCode();
      if (hasNationalNumber) hash ^= nationalNumber_.GetHashCode();
      if (hasExtension) hash ^= extension_.GetHashCode();
      if (hasItalianLeadingZero) hash ^= italianLeadingZero_.GetHashCode();
      if (hasRawInput) hash ^= rawInput_.GetHashCode();
      if (hasCountryCodeSource) hash ^= countryCodeSource_.GetHashCode();
      if (hasPreferredDomesticCarrierCode) hash ^= preferredDomesticCarrierCode_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PhoneNumber other = obj as PhoneNumber;
      if (other == null) return false;
      if (hasCountryCode != other.hasCountryCode || (hasCountryCode && !countryCode_.Equals(other.countryCode_))) return false;
      if (hasNationalNumber != other.hasNationalNumber || (hasNationalNumber && !nationalNumber_.Equals(other.nationalNumber_))) return false;
      if (hasExtension != other.hasExtension || (hasExtension && !extension_.Equals(other.extension_))) return false;
      if (hasItalianLeadingZero != other.hasItalianLeadingZero || (hasItalianLeadingZero && !italianLeadingZero_.Equals(other.italianLeadingZero_))) return false;
      if (hasRawInput != other.hasRawInput || (hasRawInput && !rawInput_.Equals(other.rawInput_))) return false;
      if (hasCountryCodeSource != other.hasCountryCodeSource || (hasCountryCodeSource && !countryCodeSource_.Equals(other.countryCodeSource_))) return false;
      if (hasPreferredDomesticCarrierCode != other.hasPreferredDomesticCarrierCode || (hasPreferredDomesticCarrierCode && !preferredDomesticCarrierCode_.Equals(other.preferredDomesticCarrierCode_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("country_code", hasCountryCode, countryCode_, writer);
      PrintField("national_number", hasNationalNumber, nationalNumber_, writer);
      PrintField("extension", hasExtension, extension_, writer);
      PrintField("italian_leading_zero", hasItalianLeadingZero, italianLeadingZero_, writer);
      PrintField("raw_input", hasRawInput, rawInput_, writer);
      PrintField("country_code_source", hasCountryCodeSource, countryCodeSource_, writer);
      PrintField("preferred_domestic_carrier_code", hasPreferredDomesticCarrierCode, preferredDomesticCarrierCode_, writer);
    }
    #endregion
    
    public static PhoneNumber ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PhoneNumber ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PhoneNumber ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PhoneNumber ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PhoneNumber ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PhoneNumber ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PhoneNumber ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PhoneNumber ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PhoneNumber ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PhoneNumber ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PhoneNumber MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PhoneNumber prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<PhoneNumber, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PhoneNumber cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PhoneNumber result;
      
      private PhoneNumber PrepareBuilder() {
        if (resultIsReadOnly) {
          PhoneNumber original = result;
          result = new PhoneNumber();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PhoneNumber MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PhoneNumber DefaultInstanceForType {
        get { return global::PhoneNumbers.PhoneNumber.DefaultInstance; }
      }
      
      public override PhoneNumber BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PhoneNumber) {
          return MergeFrom((PhoneNumber) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PhoneNumber other) {
        if (other == global::PhoneNumbers.PhoneNumber.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCountryCode) {
          CountryCode = other.CountryCode;
        }
        if (other.HasNationalNumber) {
          NationalNumber = other.NationalNumber;
        }
        if (other.HasExtension) {
          Extension = other.Extension;
        }
        if (other.HasItalianLeadingZero) {
          ItalianLeadingZero = other.ItalianLeadingZero;
        }
        if (other.HasRawInput) {
          RawInput = other.RawInput;
        }
        if (other.HasCountryCodeSource) {
          CountryCodeSource = other.CountryCodeSource;
        }
        if (other.HasPreferredDomesticCarrierCode) {
          PreferredDomesticCarrierCode = other.PreferredDomesticCarrierCode;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_phoneNumberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _phoneNumberFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCountryCode = input.ReadInt32(ref result.countryCode_);
              break;
            }
            case 16: {
              result.hasNationalNumber = input.ReadUInt64(ref result.nationalNumber_);
              break;
            }
            case 26: {
              result.hasExtension = input.ReadString(ref result.extension_);
              break;
            }
            case 32: {
              result.hasItalianLeadingZero = input.ReadBool(ref result.italianLeadingZero_);
              break;
            }
            case 42: {
              result.hasRawInput = input.ReadString(ref result.rawInput_);
              break;
            }
            case 48: {
              object unknown;
              if(input.ReadEnum(ref result.countryCodeSource_, out unknown)) {
                result.hasCountryCodeSource = true;
              } else if(unknown is int) {
              }
              break;
            }
            case 58: {
              result.hasPreferredDomesticCarrierCode = input.ReadString(ref result.preferredDomesticCarrierCode_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasCountryCode {
        get { return result.hasCountryCode; }
      }
      public int CountryCode {
        get { return result.CountryCode; }
        set { SetCountryCode(value); }
      }
      public Builder SetCountryCode(int value) {
        PrepareBuilder();
        result.hasCountryCode = true;
        result.countryCode_ = value;
        return this;
      }
      public Builder ClearCountryCode() {
        PrepareBuilder();
        result.hasCountryCode = false;
        result.countryCode_ = 0;
        return this;
      }
      
      public bool HasNationalNumber {
        get { return result.hasNationalNumber; }
      }
      public ulong NationalNumber {
        get { return result.NationalNumber; }
        set { SetNationalNumber(value); }
      }
      public Builder SetNationalNumber(ulong value) {
        PrepareBuilder();
        result.hasNationalNumber = true;
        result.nationalNumber_ = value;
        return this;
      }
      public Builder ClearNationalNumber() {
        PrepareBuilder();
        result.hasNationalNumber = false;
        result.nationalNumber_ = 0UL;
        return this;
      }
      
      public bool HasExtension {
        get { return result.hasExtension; }
      }
      public string Extension {
        get { return result.Extension; }
        set { SetExtension(value); }
      }
      public Builder SetExtension(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExtension = true;
        result.extension_ = value;
        return this;
      }
      public Builder ClearExtension() {
        PrepareBuilder();
        result.hasExtension = false;
        result.extension_ = "";
        return this;
      }
      
      public bool HasItalianLeadingZero {
        get { return result.hasItalianLeadingZero; }
      }
      public bool ItalianLeadingZero {
        get { return result.ItalianLeadingZero; }
        set { SetItalianLeadingZero(value); }
      }
      public Builder SetItalianLeadingZero(bool value) {
        PrepareBuilder();
        result.hasItalianLeadingZero = true;
        result.italianLeadingZero_ = value;
        return this;
      }
      public Builder ClearItalianLeadingZero() {
        PrepareBuilder();
        result.hasItalianLeadingZero = false;
        result.italianLeadingZero_ = false;
        return this;
      }
      
      public bool HasRawInput {
        get { return result.hasRawInput; }
      }
      public string RawInput {
        get { return result.RawInput; }
        set { SetRawInput(value); }
      }
      public Builder SetRawInput(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawInput = true;
        result.rawInput_ = value;
        return this;
      }
      public Builder ClearRawInput() {
        PrepareBuilder();
        result.hasRawInput = false;
        result.rawInput_ = "";
        return this;
      }
      
      public bool HasCountryCodeSource {
       get { return result.hasCountryCodeSource; }
      }
      public global::PhoneNumbers.PhoneNumber.Types.CountryCodeSource CountryCodeSource {
        get { return result.CountryCodeSource; }
        set { SetCountryCodeSource(value); }
      }
      public Builder SetCountryCodeSource(global::PhoneNumbers.PhoneNumber.Types.CountryCodeSource value) {
        PrepareBuilder();
        result.hasCountryCodeSource = true;
        result.countryCodeSource_ = value;
        return this;
      }
      public Builder ClearCountryCodeSource() {
        PrepareBuilder();
        result.hasCountryCodeSource = false;
        result.countryCodeSource_ = global::PhoneNumbers.PhoneNumber.Types.CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN;
        return this;
      }
      
      public bool HasPreferredDomesticCarrierCode {
        get { return result.hasPreferredDomesticCarrierCode; }
      }
      public string PreferredDomesticCarrierCode {
        get { return result.PreferredDomesticCarrierCode; }
        set { SetPreferredDomesticCarrierCode(value); }
      }
      public Builder SetPreferredDomesticCarrierCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPreferredDomesticCarrierCode = true;
        result.preferredDomesticCarrierCode_ = value;
        return this;
      }
      public Builder ClearPreferredDomesticCarrierCode() {
        PrepareBuilder();
        result.hasPreferredDomesticCarrierCode = false;
        result.preferredDomesticCarrierCode_ = "";
        return this;
      }
    }
    static PhoneNumber() {
      object.ReferenceEquals(global::PhoneNumbers.Phonenumber.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
